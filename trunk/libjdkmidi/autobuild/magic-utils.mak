##############################################################################################
#
# utility functions 

# add_top_dir_prefix is a function that takes every directory and or wildcard pattern 
# in arg1 and prefixes PROJECT_TOP_DIR to it, and then only expands the directories that actually exist.

add_top_dir_prefix=$(strip $(wildcard $(foreach lib,$(1),$(PROJECT_TOP_DIR)/$(lib))))


# subdirs_in_path is a function which takes 1 parameter:
#  $(1) is a single directory
# it expands to a list of all directories in $(1)

subdirs_in_path=$(strip $(foreach d,$(wildcard $(1)/*/.),$(dir $(d))))

bare_subdirs_in_path=$(subst /,,$(subst $(1),,$(call subdirs_in_path,$(1))))

# suffix_platform_dirs is a function that takes 3 parameters:
#  $(1) is a subdirectory name, like 'src'
#  $(2) is a list of platform directories, like 'win32' or 'posix'
#  $(3) is a list of main directory names, like '$(PROJECT_TOP_DIR)'
# 
# suffix_platform_dirs expands all existing directories that match any of $(3)/$(1) or $(3)/$(1)/$(2)


suffix_platform_dirs=$(strip $(foreach dir,$(addsuffix /$(1),$(3)) $(foreach platform,$(2),$(addsuffix /$(1)/$(platform),$(3))),$(wildcard $(dir))))


# targe_suffix_platform_dirs is a function which takes one parameter:
#  $(1) is a subdirectory name, like 'src' or 'tool'
# it expands into all existing directories for the target platform sources

target_suffix_platform_dirs=$(wildcard $(call suffix_platform_dirs,$(1),$(PLATFORM_DIRS),$(LIB_DIRS)))

# native_suffix_platform_dirs is a function which takes one parameter:
#  $(1) is a subdirectory name, like 'src' or 'tool'
# it expands into all existing directories for the native platform sources

native_suffix_platform_dirs=$(wildcard $(call suffix_platform_dirs,$(1),$(NATIVE_PLATFORM_DIRS),$(LIB_DIRS)))

# get_file_list is a function which takes two parameters:
#  $(1) a list of directory names
#  $(2) a file extension (without the dot)
# it expands into all the file names that are found in the listed directories which that file extension,
# and then removes all the directory names from the results.

get_file_list=$(strip $(notdir $(foreach dir,$(1),$(wildcard $(dir)/*.$(2)))))

# get_file_list_full is just like get_file_list but returns the full source path names instead of just the basenames

get_file_list_full=$(strip $(foreach dir,$(1),$(wildcard $(dir)/*.$(2))))


# get_src_file_list is a function which takes one parameter:
#  $(1) is a file extension
# it expands into a list of all source files for the target platform that of that type
# (with the directory names removed)

get_src_file_list=$(call get_file_list,$(LIB_SRC_DIR),$(1))
get_native_src_file_list=$(call get_file_list,$(NATIVE_LIB_SRC_DIR),$(1))

# get_include_file_list is a function which takes one parameter:
#  $(1) is a file extension
# it expands into a list of all include files for the target platform that of that type
# (with the directory names removed)

get_include_file_list=$(call get_file_list_full,$(call subdirs_in_path,$(LIB_INCLUDE_DIR)),$(1)) $(call get_file_list_full,$(LIB_INCLUDE_DIR),$(1))

# get_cpp_o_files is a function which takes one parameter:
#  $(1) is a list of cpp files with no directory names
#
# it returns the full path names for all the required object files which are generated by cpp files.
# get_cc_o_files, get_c_o_files, get_m_o_files, and get_mm_o_files are the same as get_cpp_o_files 
# except for C, Objective-C, and Objective-C++ respectively.

get_cpp_o_files=$(addprefix $(OUTPUT_OBJ_DIR)/,$(1:.cpp=.o))
get_cc_o_files=$(addprefix $(OUTPUT_OBJ_DIR)/,$(1:.cc=.o))
get_c_o_files=$(addprefix $(OUTPUT_OBJ_DIR)/,$(1:.c=.o))
get_m_o_files=$(addprefix $(OUTPUT_OBJ_DIR)/,$(1:.m=.o))
get_mm_o_files=$(addprefix $(OUTPUT_OBJ_DIR)/,$(1:.mm=.o))
get_rc_o_files=$(addprefix $(OUTPUT_OBJ_DIR)/,$(1:.rc=.o))

get_native_cpp_o_files=$(addprefix $(NATIVE_OUTPUT_OBJ_DIR)/,$(1:.cpp=.o))
get_native_cc_o_files=$(addprefix $(NATIVE_OUTPUT_OBJ_DIR)/,$(1:.cc=.o))
get_native_c_o_files=$(addprefix $(NATIVE_OUTPUT_OBJ_DIR)/,$(1:.c=.o))
get_native_m_o_files=$(addprefix $(NATIVE_OUTPUT_OBJ_DIR)/,$(1:.m=.o))
get_native_mm_o_files=$(addprefix $(NATIVE_OUTPUT_OBJ_DIR)/,$(1:.mm=.o))
get_native_rc_o_files=$(addprefix $(NATIVE_OUTPUT_OBJ_DIR)/,$(1:.rc=.o))



# calc_target_options is a function which takes 1 parameter:
#   $(1) is a target platform suffix, such as MINGW32, POSIX, or LINUX
# 
# it expands into makefile code which is to be ultimately eval'd - 
# this means that if $(1) is LINUX, then for instance, COMPILE_FLAGS_LINUX
# will get appended to the current COMPILE_FLAGS.
# the variables set in this fashion include:
#  LIB_SRC_DIR, DEFINES, COMPILE_FLAGS, LINK_FLAGS, LINK_FLAGS_GUI, LDLIBS, and LDLIBS_GUI

define calc_target_options
# add the relevant top src dirs
LIB_SRC_DIR+=$$(call add_top_dir_prefix,$$(TOP_LIB_DIRS_$(1)))

# set the target platform macro definition
DEFINES+=TARGET_PLATFORM_$(1)=1

# set the platform specific project defines
DEFINES+=$$(DEFINES_$(1))

# set the platform specific project compile flags
COMPILE_FLAGS+=$$(COMPILE_FLAGS_$(1))

# set the platform specific project pre-process flags
PREPROCESS_FLAGS+=$$(PREPROCESS_FLAGS_$(1))

# set the platform specific project link flags
LINK_FLAGS+=$$(LINK_FLAGS_$(1))

# set the platform specific project gui link flags
LINK_FLAGS_GUI+=$$(LINK_FLAGS_GUI_$(1))

# set the platform specific project link libs
LDLIBS+=$$(LDLIBS_$(1))

# set the platform specific project gui link libs
LDLIBS_GUI+=$$(LDLIBS_GUI_$(1))
endef


# calc_multi_target_options is a function which takes 1 parameter:
#  $(1) is a list of target platform suffixes, such as POSIX or LINUX
# it takes each one and expands them via the calc_target_options function.
# this expansion is to be eval'd.

calc_multi_target_options=$(foreach suffix,$(1),$(call calc_target_options,$(suffix)))


# calc_native_options is a function which takes 1 parameter:
#   $(1) is a native platform suffix, such as MINGW32, POSIX, or LINUX
# 
# it expands into makefile code which is to be ultimately eval'd - 
# this means that if $(1) is LINUX, then for instance, COMPILE_FLAGS_LINUX
# will get appended to the current NATIVE_COMPILE_FLAGS.
# the variables set in this fashion include:
#  NATIVE_LIB_SRC_DIR, NATIVE_DEFINES, NATIVE_COMPILE_FLAGS, 
#  NATIVE_LINK_FLAGS, NATIVE_LINK_FLAGS_GUI, NATIVE_LDLIBS, and NATIVE_LDLIBS_GUI

define calc_native_options
# add the relevant top src dirs
NATIVE_LIB_SRC_DIR+=$$(call add_top_dir_prefix,$$(TOP_LIB_DIRS_$(1)))

# set the target platform macro definition
NATIVE_DEFINES+=TARGET_PLATFORM_$(1)=1

# set the platform specific project defines
NATIVE_DEFINES+=$$(DEFINES_$(1))

# set the platform specific project compile flags
NATIVE_COMPILE_FLAGS+=$$(COMPILE_FLAGS_$(1))

# set the platform specific project preprocess flags
NATIVE_PREPROCESS_FLAGS+=$$(PREPROCESS_FLAGS_$(1))

# set the platform specific project link flags
NATIVE_LINK_FLAGS+=$$(LINK_FLAGS_$(1))

# set the platform specific project gui link flags
NATIVE_LINK_FLAGS_GUI+=$$(LINK_FLAGS_GUI_$(1))

# set the platform specific project link libs
NATIVE_LDLIBS+=$$(LDLIBS_$(1))

# set the platform specific project gui link libs
NATIVE_LDLIBS_GUI+=$$(LDLIBS_GUI_$(1))
endef


# calc_multi_native_options is a function which takes 1 parameter:
#  $(1) is a list of native platform suffixes, such as POSIX or LINUX
# it takes each one and expands them via the calc_native_options function.
# this expansion is to be eval'd.

calc_multi_native_options=$(foreach suffix,$(1),$(call calc_native_options,$(suffix)))


# search_program_group is a function which returns the makefile text required to find
# all source files in a specified directory class and construct the o file lists for them.
# Param $(1) is the class of program in capitals, for example TOOLS, TESTS, EXAMPLES, GUI
# the text returned by this function is then to be eval'd.  The appropriate lists of 
# source files and O files for this class are then created dynamically.

define search_program_group
LIB_$(1)_CPP_FILES=$$(call get_file_list,$$(LIB_$(1)_DIR),cpp)
LIB_$(1)_CC_FILES=$$(call get_file_list,$$(LIB_$(1)_DIR),cc)
LIB_$(1)_C_FILES=$$(call get_file_list,$$(LIB_$(1)_DIR),c)
LIB_$(1)_M_FILES=$$(call get_file_list,$$(LIB_$(1)_DIR),m)
LIB_$(1)_MM_FILES=$$(call get_file_list,$$(LIB_$(1)_DIR),mm)
LIB_$(1)_RC_FILES=$$(call get_file_list,$$(LIB_$(1)_DIR),rc)
LIB_$(1)_SH_FILES=$$(call get_file_list_full,$$(LIB_$(1)_DIR),sh)

LIB_$(1)_O_FILES=$$(call get_cpp_o_files,$$(LIB_$(1)_CPP_FILES)) \
	$$(call get_cc_o_files,$$(LIB_$(1)_CC_FILES)) \
	$$(call get_c_o_files,$$(LIB_$(1)_C_FILES)) \
	$$(call get_m_o_files,$$(LIB_$(1)_M_FILES)) \
	$$(call get_mm_o_files,$$(LIB_$(1)_MM_FILES)) \
	$$(call get_rc_o_files,$$(LIB_$(1)_RC_FILES))

LIB_$(1)_DISASM_FILES=$$(LIB_$(1)_O_FILES:.o=.disasm)

LIB_$(1)_ASM_FILES=$$(LIB_$(1)_O_FILES:.o=.asm)

LIB_$(1)_EXE_FILES=$$(addprefix $$(OUTPUT_$(1)_DIR)/,$$(notdir $$(LIB_$(1)_O_FILES:.o=$$(EXE))))

ifeq ($(CROSS_COMPILING),1)
NATIVE_LIB_$(1)_CPP_FILES=$$(call get_file_list,$$(NATIVE_LIB_$(1)_DIR),cpp)
NATIVE_LIB_$(1)_CC_FILES=$$(call get_file_list,$$(NATIVE_LIB_$(1)_DIR),cc)
NATIVE_LIB_$(1)_C_FILES=$$(call get_file_list,$$(NATIVE_LIB_$(1)_DIR),c)
NATIVE_LIB_$(1)_M_FILES=$$(call get_file_list,$$(NATIVE_LIB_$(1)_DIR),m)
NATIVE_LIB_$(1)_MM_FILES=$$(call get_file_list,$$(NATIVE_LIB_$(1)_DIR),mm)
NATIVE_LIB_$(1)_SH_FILES=$$(call get_file_list_full,$$(NATIVE_LIB_$(1)_DIR),sh)
NATIVE_LIB_$(1)_RC_FILES=$$(call get_file_list,$$(NATIVE_LIB_$(1)_DIR),rc)

NATIVE_LIB_TOOLS_O_FILES=$$(call get_native_cpp_o_files,$$(NATIVE_LIB_$(1)_CPP_FILES)) \
	$$(call get_native_cc_o_files,$$(NATIVE_LIB_$(1)_CC_FILES)) \
	$$(call get_native_c_o_files,$$(NATIVE_LIB_$(1)_C_FILES)) \
	$$(call get_native_m_o_files,$$(NATIVE_LIB_$(1)_M_FILES)) \
	$$(call get_native_mm_o_files,$$(NATIVE_LIB_$(1)_MM_FILES)) \
	$$(call get_native_rc_o_files,$$(NATIVE_LIB_$(1)_RC_FILES))

NATIVE_LIB_$(1)_EXE_FILES=$$(addprefix $$(NATIVE_OUTPUT_$(1)_DIR)/,$$(notdir $$(NATIVE_LIB_$(1)_O_FILES:.o=$$(NATIVE_EXE))))
endif
endef
